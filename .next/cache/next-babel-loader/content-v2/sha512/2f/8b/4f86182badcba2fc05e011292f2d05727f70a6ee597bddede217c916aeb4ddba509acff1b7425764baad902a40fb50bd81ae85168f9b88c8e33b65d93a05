{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/suryakanthreddy/Desktop/React/Next/Meetup_project/pages/[meetupid]/index.js\";\nimport { useRouter } from \"next/router\";\nimport { Fragment } from \"react\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails(props) {\n  // const router = useRouter();\n  // const meetupId = router.query.meetupid;\n  // console.log(meetupId);\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupdata.image,\n    title: props.meetupdata.title,\n    address: props.meetupdata.address,\n    description: props.meetupdata.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n}\n\n_c = MeetupDetails;\nexport var __N_SSG = true;\nexport default MeetupDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetails\");","map":{"version":3,"sources":["/Users/suryakanthreddy/Desktop/React/Next/Meetup_project/pages/[meetupid]/index.js"],"names":["useRouter","Fragment","MeetupDetail","MeetupDetails","props","meetupdata","image","title","address","description"],"mappings":";;AACA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;AACA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B;AACA;AACA;AACA,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD1B;AAEE,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAF1B;AAGE,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH5B;AAIE,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJhC;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;KAZQN,a;;AAoDT,eAAeA,aAAf","sourcesContent":["import { MongoClient, ObjectId } from \"mongodb\";\nimport { useRouter } from \"next/router\";\nimport { Fragment } from \"react\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nfunction MeetupDetails(props) {\n  // const router = useRouter();\n  // const meetupId = router.query.meetupid;\n  // console.log(meetupId);\n  return (\n    <MeetupDetail\n      image={props.meetupdata.image}\n      title={props.meetupdata.title}\n      address={props.meetupdata.address}\n      description={props.meetupdata.description}\n    />\n  );\n}\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\n    \"mongodb+srv://admin-surya:hello123@cluster0.bd0g5.mongodb.net/meetups?retryWrites=true&w=majority\"\n  );\n  const db = client.db();\n  const meetupcollections = db.collection(\"meetups\");\n  const meetups = await meetupcollections.find({}, { _id: 1 }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map((meetup) => ({\n      params: {\n        meetupid: meetup._id.toString(),\n      },\n    })),\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupid;\n  const client = await MongoClient.connect(\n    \"mongodb+srv://admin-surya:hello123@cluster0.bd0g5.mongodb.net/meetups?retryWrites=true&w=majority\"\n  );\n  const db = client.db();\n  const meetupcollections = db.collection(\"meetups\");\n  const meetup = await meetupcollections.findOne({ _id: ObjectId(meetupId) });\n  client.close();\n  return {\n    props: {\n      meetupdata: {\n        id: meetup._id.toString(),\n        title: meetup.title,\n        address: meetup.address,\n        image: meetup.image,\n        description: meetup.description,\n      },\n    },\n  };\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}